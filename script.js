document.addEventListener('DOMContentLoaded', () => {
    // Refer√™ncias aos elementos HTML
    const rouletteWheel = document.getElementById('roulette-wheel');
    const questionDisplay = document.getElementById('question-display');
    const passButton = document.getElementById('pass-button');
    const matchButton = document.getElementById('match-button');
    const answeredCountSpan = document.getElementById('answered-count');
    const endGameButton = document.getElementById('end-game-button');
    const resultMessage = document.getElementById('result-message');

    // Array de perguntas para o jogo. AGORA COM SUAS PERGUNTAS!
    const questions = [
        "1. Quem notou o outro primeiro?",
        "2. Quem tomou a iniciativa de conversar?",
        "3. Quem tomou a iniciativa do primeiro beijo?",
        "4. Quem se apaixonou primeiro?",
        "5. Quem pediu em namoro?",
        "6. Quem disse ‚Äúeu te amo‚Äù primeiro?",
        "7. Quem come√ßa as discuss√µes?",
        "8. Quem pede desculpas primeiro?",
        "9. Quem sempre pede conselhos?",
        "10. Quem √© mais carinhoso?",
        "11. Quem √© mais grudento na rela√ß√£o?",
        "12. Quem faz mais as melhores surpresas?",
        "13. E... Quem faz mais surpresas?",
        "14. Quem √© mais rom√¢ntico?",
        "15. Quem d√° os melhores presentes?",
        "16. Quem √© mais teimoso?",
        "17. Quem √© mais dorminhoco?",
        "18. Quem ronca?",
        "19. Que fala dormindo?",
        "20. Quem demora mais para se arrumar?",
        "21. Quem √© mais mal-humorado pelas manh√£s?",
        "22. Quem √© mais ‚Äúm√£o de vaca‚Äù?",
        "23. Quem √© mais ciumento?",
        "24. Quem √© mais bagunceiro?",
        "25. Quem √© melhor dan√ßarino?",
        "26. Quem √© mais pregui√ßoso?",
        "27. Quem √© mais comil√£o?",
        "28. Quem √© mais brincalh√£o?",
        "29. Quem mais ri de bobeiras?",
        "30. Quem √© mais barraqueiro?",
        "31. Quem √© 'bom de copo'?",
        "32. Quem conta as melhores piadas?",
        "33. Quem n√£o dispensa uma boa fofoca?",
        "34. Quem tem mais manias esquisitas?",
        "35. Quem gosta mais de bichinhos de estima√ß√£o?",
        "36. Quem faz mais dramas?",
        "37. Quem era mais protegido pelos pais?",
        "38. Quem brincava mais na rua?",
        "39. Quem era mais bagunceiro na escola?",
        "40. Quem era o preferido dos professores?",
        "41. Quem era bom aluno, o 'nerd'?",
        "42. Quem se machucou mais quando crian√ßa?",
        "43. Quem teve catapora quando crian√ßa?",
        "44. Quem ficou mais vezes de castigo?",
        "45. Quem teve cole√ß√£o de coisas esquisitas?",
        "46. Quem gostava mais de desenho animado?",
        "47. Quem deu o primeiro beijo?",
        "48. Quem gosta de filmes de terror?",
        "49. Quem gosta de filmes de com√©dia rom√¢ntica?",
        "50. Quem adora fazer maratona de s√©ries?",
        "51. Quem sabe mais sobre decora√ß√£o de casa?",
        "52. Quem cozinha melhor?",
        "53. Quem gosta mais de ler?",
        "54. Quem entende mais de m√∫sica?",
        "55. Quem sabe se vestir melhor?",
        "56. Quem sabe dirigir melhor?",
        "57. Quem se esquece de tudo?",
        "58. Quem adora se perfumar?",
        "59. Quem mais prop√µe fazer exerc√≠cios f√≠sicos?",
        "60. Quem demora mais para responder mensagens?",
        "61. Quem tem mais mania de limpeza?",
        "62. Quem prefere ficar em casa que sair?",
        "63. Quem gosta mais de pedir fast food?",
        "64. Quem sonhava em se casar?",
        "65. Quem fez o pedido?",
        "66. Quem se estressou mais com a organiza√ß√£o?",
        "67. Quem n√£o parava de falar sobre o casamento?",
        "68. Quem est√° se divertindo mais com o casamento?",
        "69. Quem toma mais a iniciativa na hora do sexo?",
        // Perguntas Picantes
        "70. Quem √© mais criativo na cama?",
        "71. Quem √© mais barulhento?",
        "72. Quem manda mensagens ousadas?",
        "73. Quem curte lugares diferentes?",
        "74. Quem pode sugerir um v√≠deo a dois?"
    ];

    let availableQuestions = [...questions]; // Copia todas as perguntas para o pool dispon√≠vel
    let answeredQuestionsCount = 0; // Contador de perguntas respondidas
    let matchCount = 0; // Contador de "Deu Match"
    let isSpinning = false; // Flag para controlar se a roleta est√° girando

    // Esconde os bot√µes de op√ß√£o e o contador no in√≠cio do jogo
    passButton.style.display = 'none';
    matchButton.style.display = 'none';
    answeredCountSpan.parentElement.style.display = 'none';

    /**
     * Seleciona uma pergunta aleat√≥ria do pool de perguntas dispon√≠veis
     * e a remove para evitar repeti√ß√£o na mesma rodada.
     * Se todas as perguntas forem usadas, o pool √© reiniciado.
     * @returns {string} A pergunta selecionada.
     */
    function getRandomQuestion() {
        // Se n√£o houver mais perguntas dispon√≠veis, reinicia o pool
        if (availableQuestions.length === 0) {
            availableQuestions = [...questions];
            console.log("Todas as perguntas foram usadas, reiniciando o pool de perguntas.");
        }
        // Seleciona um √≠ndice aleat√≥rio
        const randomIndex = Math.floor(Math.random() * availableQuestions.length);
        // Pega a pergunta
        const question = availableQuestions[randomIndex];
        // Remove a pergunta do pool para que n√£o seja repetida
        availableQuestions.splice(randomIndex, 1);
        return question;
    }

    /**
     * Inicia o giro da roleta, exibe a pergunta e mostra os bot√µes de op√ß√£o.
     * Impede giros m√∫ltiplos enquanto a roleta j√° est√° girando.
     */
    function spinRoulette() {
        // N√£o permite girar se j√° estiver girando ou se n√£o houver mais perguntas
        if (isSpinning || availableQuestions.length === 0) {
            if (availableQuestions.length === 0) {
                displayFinalResult(); // Se n√£o h√° perguntas, mostra o resultado final
            }
            return;
        }

        isSpinning = true; // Define a flag de giro como true
        resultMessage.style.display = 'none'; // Esconde a mensagem final se estiver vis√≠vel
        questionDisplay.textContent = "Girando..."; // Mensagem durante o giro
        passButton.style.display = 'none'; // Esconde os bot√µes de op√ß√£o
        matchButton.style.display = 'none';
        rouletteWheel.classList.add('spinning'); // Adiciona a classe para iniciar a anima√ß√£o

        // Simula o tempo de giro da roleta
        setTimeout(() => {
            rouletteWheel.classList.remove('spinning'); // Remove a classe para parar a anima√ß√£o
            const currentQuestion = getRandomQuestion(); // Pega uma nova pergunta
            questionDisplay.textContent = currentQuestion; // Exibe a pergunta
            passButton.style.display = 'inline-block'; // Mostra os bot√µes de op√ß√£o
            matchButton.style.display = 'inline-block';
            answeredCountSpan.parentElement.style.display = 'block'; // Mostra o contador de perguntas
            isSpinning = false; // Permite um novo giro
        }, 3000); // A roleta gira por 3 segundos
    }

    /**
     * Lida com a resposta do jogador ("Passa" ou "Deu Match").
     * @param {boolean} isMatch - True se "Deu Match", false se "Passa".
     */
    function handleAnswer(isMatch) {
        if (isSpinning) return; // N√£o permite responder enquanto a roleta est√° girando

        answeredQuestionsCount++; // Incrementa o contador de perguntas respondidas
        answeredCountSpan.textContent = answeredQuestionsCount; // Atualiza o display

        if (isMatch) {
            matchCount++; // Incrementa o contador de "Deu Match"
        }

        // Verifica se ainda h√° perguntas a serem respondidas
        if (answeredQuestionsCount < questions.length) {
            spinRoulette(); // Gira para a pr√≥xima pergunta
        } else {
            displayFinalResult(); // Se todas as perguntas foram respondidas, exibe o resultado final
        }
    }

    /**
     * Exibe a mensagem de resultado final do jogo.
     */
    function displayFinalResult() {
        // Esconde os elementos do jogo
        passButton.style.display = 'none';
        matchButton.style.display = 'none';
        rouletteWheel.style.display = 'none';
        endGameButton.style.display = 'none';
        questionDisplay.style.display = 'none';
        answeredCountSpan.parentElement.style.display = 'none';

        const percentageMatch = (matchCount / (answeredQuestionsCount || 1)) * 100; // Calcula a porcentagem de match
        let message = "";

        // Define a mensagem final com base na porcentagem de "Deu Match"
        if (percentageMatch > 50) {
            message = "Parab√©ns casal, voc√™s est√£o em sintonia!";
        } else {
            message = "Que divertido! Continuem se conhecendo! üòâ";
        }
        
        resultMessage.textContent = message; // Define o texto da mensagem
        resultMessage.style.display = 'block'; // Mostra a mensagem final
    }

    // --- Listeners de Eventos ---
    // Inicia o giro da roleta ao clicar no container da roleta
    rouletteWheel.addEventListener('click', spinRoulette);
    // Lida com a resposta "Passa"
    passButton.addEventListener('click', () => handleAnswer(false));
    // Lida com a resposta "Deu Match"
    matchButton.addEventListener('click', () => handleAnswer(true));
    // Encerra o jogo ao clicar no bot√£o "Encerrar Jogo"
    endGameButton.addEventListener('click', displayFinalResult);
});
